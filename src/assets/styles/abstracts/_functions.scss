@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use './config' as c;

@function breakpoint-next(
  $name,
  $breakpoints: c.$grid-breakpoints,
  $breakpoint-names: map.keys($breakpoints)
) {
  $n: list.index($breakpoint-names, $name);

  @return if(
    $n < list.length($breakpoint-names),
    list.nth($breakpoint-names, $n + 1),
    null
  );
}

@function breakpoint-min($name, $breakpoints: c.$grid-breakpoints) {
  $type: meta.type-of($name);
  $min: 0;

  @if $type == string {
    $min: map.get($breakpoints, $name);
  } @else if $type == number {
    $min: $name;
  } @else {
    $min: 0;
  }

  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: c.$grid-breakpoints) {
  $type: meta.type-of($name);
  $next: 0;

  @if $type == string {
    $next: breakpoint-next($name, $breakpoints);
    $next: if($next, breakpoint-min($next, $breakpoints) - 0.02px, null);
  } @else if $type == number {
    $next: $name;
  } @else {
    $next: 0;
  }

  @return if($next != 0, $next, null);
}

@function breakpoint-infix($name, $breakpoints: c.$grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
